Когда никто не мешает
Для базовой работы с Git достаточно консоли и любого текстового редактора — VSCode, Vim, Emacs, PyCharm.
Установите Git подходящим для вашей ОС способом. Создайте папку git_intro и откройте её в консоли — в ней вы будете оттачивать свои навыки работы с Git. Чтобы система контроля версий стала следить за всеми изменениями в папке, нужно инициализировать в ней репозиторий командой git init. После её выполнения Git создаст скрытую папку .git и поместит туда всё необходимое для дальнейшей работы. Вам, скорее всего, не придётся в неё заглядывать, но если интересно, посмотрите описание её структуры.
После создания репозитория в консоли вы увидете такую надпись:
Initialized empty Git repository in /Users/your_username/git_intro/.git/ 
Пришло время представиться. Расскажите Git, как вас зовут (лучше всего написать своё настоящее имя и почту):
git config user.name "Guido van Rossum"
git config user.email "guido@python.org" 
Эти данные будут идентифицировать вас во всех изменениях в качестве автора.
Создайте новый файл. Заполните README.md любым интересным текстом.
echo "# Как пользоваться Git" > README.md 
Первый коммит
Давайте посмотрим на этот проект глазами Git. Выполните команду git status. Вот что вы увидите в консоли после этого:
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        README.md

nothing added to commit but untracked files present (use "git add" to track) 
Git показал, в какой ветке находятся изменения (о ветках мы поговорим немного позднее) и вывел список найденных файлов. README.md помечен как «неотслеживаемый». Это значит, что он не добавлен в индекс: изменения в этом файле не будут записаны в следующий коммит. Коммитом называют набор изменений. Это та самая «точка сохранения», которая добавляется в историю. 
Укажите Git, чтобы он следил за изменениями README.md:
git add README.md 
Если захотите добавить сразу все файлы, то воспользуйтесь командой:
git add . 
Однако, стоит помнить, что без грамотно оформленного файла .gitignore в коммит могут попасть «мусорные» файлы.
Где теперь в выводе git status находится файл README.md?
Changes to be committed

Отлично! Осталось самое сложное: придумать название для коммита. Именно по ним вы и другие разработчики будете вспоминать причины внесения изменений в код. В момент создания коммита вы достаточно погружены в задачу, чтобы написать дельное описание. Пользуйтесь этим!
Плохая история коммитов выглядит так:
573a2c6 - V.Petrov, 2 days ago : Добавил тесты
0153a95 - V.Petrov, 3 days ago : fix
b0e36e9 - V.Petrov, 3 days ago : Теперь точно починил баг
9e1d923 - V.Petrov, 4 days ago : Починил баг
7f22e9c - V.Petrov, 4 days ago : Изменил схему апи 
Ужасная так:
0153a95 - V.Petrov, 3 days ago : other changes
b0e36e9 - V.Petrov, 3 days ago : ! it works
9e1d923 - V.Petrov, 4 days ago : some code
7f22e9c - V.Petrov, 4 days ago : refactoring
7f22e9c - V.Petrov, 4 days ago : fhoianjl 
Хорошая история коммитов рассказывает о конкретных изменениях:
0153a95 - V.Petrov, 3 days ago : Исправлены грамматические ошибки в документации
b0e36e9 - V.Petrov, 3 days ago : Добавлена сортировка пользователей по дате регистрации
9e1d923 - V.Petrov, 4 days ago : Django обновлена до 3.1.1 
7f22e9c - V.Petrov, 4 days ago : Увеличена минимальная длина пароля до 16 символов
7f22e9c - V.Petrov, 4 days ago : Добавлен модуль авторизации 
Для создания коммита примените команду commit с параметром -m (message) и напишите короткое, но качественное описание. С рекомендациями по этому вопросу можете ознакомиться в гайде.
git commit -m "Добавлен README.md" 
В ответном сообщении Git напишет, какие изменения были зафиксированы.
[master (root-commit) 8b4f5c2] Добавлен README.md
 1 file changed, 1 insertion(+)
 create mode 100644 README.md 

Просмотр истории

Сделайте ещё несколько изменений на ваш вкус. Напишите что-то ещё в README.md или добавьте новые файлы, а потом зафиксируйте изменения.
echo '* Перед коммитом изменений нужно убедиться, что все файлы добавлены в индекс.' >> commmit_help.md
echo '* Посмотреть состояние индекса можно командой `git status.`' >> commmit_help.md
echo '* Используйте `git add filename` для добавления конкретного файла или `git add .` для добавления всех файлов' >> commmit_help.md
echo '* Чтобы одной командой добавить все изменённые файлы и сделать коммит, выполните `git commit -am "commit message"`' >> commmit_help.md
echo '* Новые файлы добавлены не будут' >> commmit_help.md
echo '- [Как сделать новый коммит](./commmit_help.md)' >> README.md 
После того как вы добавили файлы в индекс и закоммитили их, ваша цепочка изменений увеличилась. Посмотрите на неё командой git log.
commit 72d968f94fc8a0b593a2a8e21a8b3946b7018403 (HEAD -> master)
Author: Guido van Rossum <guido@python.org>
Date:   Thu Jan 01 00:05:32 2020 +0300

    Добавлена информация о команде commit

commit e98adc2eeb56d59285c6cf3f66b0b85458c186ab
Author: Guido van Rossum <guido@python.org>
Date:   Thu Jan 01 00:00:14 2020 +0300

    Добавлен README.md 
Стандартный вывод команды log содержит полный хеш коммита, данные автора, дату и описание изменений. У команды log широкий набор инструментов для форматирования — ознакомьтесь с документацией.
Как вывести историю в формате «Хеш коммита, дата, автор, описание комита, список изменённых файлов»?

git log --pretty=format:"%h %ad %an %s" --stat

Чтобы постоянно не печатать длинную команду, вы можете создать для неё короткое имя — alias. Для этого внесите изменения в файл ~/.gitconfig. 
[alias]
    history = log --graph --oneline --decorate 
В этом файле хранятся настройки Git. Всего таких файлов три:
/etc/gitconfig — содержит общие для всей системы настройки.
~/.gitconfig — содержит настройки для вашего пользователя.
.git/config — находится в папке репозитория. В нём указаны настройки конкретного проекта.
Если в нескольких файлах будут по-разному настроены одинаковые параметры, то будут использоваться те, чья область применения меньше всего. То есть ваш .git/config важнее, чем ~/.gitconfig, а они оба перекрывают /etc/gitconfig.
Посмотреть все настройки, которые применены к проекту, можно командой git config --list --show-origin.
Теперь в вашем Git есть команда git history, делающая то же самое, что и git log --graph --oneline --decorate.
Отмена изменений
Чтобы повернуть время вспять и вернуть состояние проекта к любому коммиту, используйте reset.
Для практики немножко накосячим :) Сделайте ещё один коммит:
echo '* Список всех коммитов показывает команда `git log`' >> log_help.md
echo '- [Как просмотреть историю](./log_help.md)' >> README.md
echo >> reset_help.md 
git add .
git commit -m "Добавлена информация про log и файл для информации про reset" 
Хей! Если в сообщении коммита есть союз «и», значит изменений в нём слишком много. Давайте вернёмся к предыдущему коммиту и сделаем новый, включив в него только log_help.md и README.md.
Команда git reset откатывает все изменения в текущей ветке до указанной версии коммита. Так можно делать в той ветке, с которой работаете только вы и никто другой. При применении команды переписывается история ветки.
При ресете передаётся один из трёх ключей:
--soft — откатывает изменения до указанного комита. При этом изменения остаются в индексе, будто вы сделали git add, но не закоммитили их.
--mixed (стоит по умолчанию) — аналогичен варианту выше, но изменения уже не будут отслеживаться. Если после ресета выполнить команду git status, то Git предложит добавить изменения командой git add.
--hard — как видно из названия, это самый жёсткий вариант. Он полностью откатывает изменения и заменяет данные в рабочей директории. Все закоммиченные и незакоммиченные изменения удаляются.
Чтобы перейти к состоянию предыдущего коммита, выполните команду git reset --soft HEAD~1. HEAD — это указатель на коммит, на котором вы находитесь. HEAD~1 возвращает хеш предыдущего коммита. То же самое вы можете сделать, скопировав нужный хеш из команды git log: git reset --soft ha1234sh. 
Если вы заглянете в git log, то увидите, что ваш последний коммит пропал из списка. А git status покажет, что все файлы остались в индексе. Нужно убрать оттуда пустой файл reset_help.md. Для этого пригодится команда git rm с параметром --cached — удалить из индекса, но оставить в файловой системе.
git rm --cached reset_help.md 
Какая команда уберёт файл из индекса и файловой системы?
echo >> file.txt
git add file.txt
git commit -m ooops 


rm file.txt && git rm file.txt --cached
Да, так вы сначала удалите файл из системы, а затем укажете Git, что его не нужно отслеживать.


Тоже правильный ответ
git rm file.txt
Лучший выбор. Git сотрёт файл и уберёт его из индекса.

Неправильный ответ
git rm file.txt --cached
Эта команда уберёт файл из индекса, но оставит в файловой системе.

Тоже правильный ответ
git rm file.txt --force
Тоже верно. Ключ --force необходим, если вы успели добавить в файл какие-либо изменения.

Чтобы просмотреть разницу между индексом и последним коммитом, выполните команду git diff --staged. В результате вы получите вариант, похожий на этот:
diff --git a/README.md b/README.md
index ed22cde..0d0e9b2 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,3 @@
 # Как пользоваться Git
 - [Как сделать новый коммит](./commmit_help.md)
+- [Как просмотреть историю](./log_help.md)
diff --git a/log_help.md b/log_help.md
new file mode 100644
index 0000000..de044e0
--- /dev/null
+++ b/log_help.md
@@ -0,0 +1 @@
+* Список всех коммитов показывает команда `git log`
diff --git a/reset_help.md b/reset_help.md 
Знак - напротив строки означает, что её удалили. Знак + означает, что строку добавили. Если строчка была просто изменена, то её старая версия отобразится со знаком -, а новая — со знаком +. Этот подход нужен, когда под рукой нет IDE или merge-инструмента.
Команда git diff без ключа --staged покажет отличия между проиндексированными и непроиндексированными изменениями.
Если нужно сравнить два конкретных коммита, то команда будет выглядеть так:
git diff cf5c7edcd8de031fa8dfd28fa893ef2832bdf280 35d5ce7b29fbba8caf22e090f2cf74710fe9cc01 
Названия коммитов можно посмотреть, выполнив команду git log.
Сделайте два коммита: один с файлами README.md и log_help, а второй — с reset_help.md. Теперь ваша история должна выглядеть так:
c9067c0 (HEAD -> master) Добавлен файл reset_help.md
facb9fb Добавлена информация о команде log
7374bd1 Добавлена информация о команде commit
0647209 Добавлен README.md 
Идеальная история одной командой
Только что вы исправили небольшой беспорядок, применив git reset и git commit. Теперь стоит рассказать, что изменить последний коммит можно гораздо проще. Давайте дополним файл reset_help.md:
echo '* Команда `reset` откатывает проект к выбранному коммиту' >> reset_help.md
echo '- [Как вернуться к прошлой версии](./reset_help.md)' >> README.md 
Вам нужно добавить эти изменения в предыдущий коммит и дать ему новое название. Вы можете сделать это, использовав параметр --amend.
git add .
git commit --amend -m "Добавлена информация о команде reset" 
Этот параметр означает, что актуальный индекс будет применён к последнему коммиту. С её помощью вы можете:
исправить опечатку в названии последнего коммита;
добавить или убрать файлы из коммита.
Теперь ваша история выглядит так:
d3aff95 (HEAD -> master) Добавлена информация о команде reset
facb9fb Добавлена информация о команде log
7374bd1 Добавлена информация о команде commit
0647209 Добавлен README.md 
Ещё несколько способов изменения истории вы найдёте в уроке по работе с ветками.
Неотслеживаемые файлы
В каждом проекте есть файлы, которые нет смысла хранить в истории. Если вы пользуетесь Pycharm, это будет папка с вашими настройками IDE (.idea). При использовании виртуального окружения вам не стоит добавлять в Git директорию, в которую установлен Python и его зависимости (обычно она называется venv). Байт-код в .pyc-, .pyd- и .pyo-файлах, файлы логов, отчёты о результатах тестов и прочие производственные артефакты не важны для работы проекта, поэтому нужно спрятать их от всевидящего ока Git. 
Для этого заведите в корне проекта файл .gitignore. В нём вы можете указать конкретный файл или glob-выражение.
ignore_me.txt          # Игнорировать файл 
app/ignored/           # Игнорировать папку  
*.py[cdo]              # Игнорировать все файлы с расширением pyc/pyd/pyo
app/**/*.log           # Игнорировать log-файлы в app- и поддиректориях 
!app/main.log          # ... кроме файла main.log 
В разных языках и разных проектах набор правил будет отличаться. Рекомендуемый набор правил для Python можно подсмотреть в инструкции. https://github.com/github/gitignore/blob/main/Python.gitignore








